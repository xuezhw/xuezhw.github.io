{"pages":[{"title":"关于","text":"天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。人之为学有难易乎？学之，则难者亦易矣；不学，则易者亦难矣。 二手java程序员，努力学习中。","link":"/about/index.html"}],"posts":[{"title":"Hexo系列教程之一：hexo+github搭建独立博客","text":"前言 引用一下阮一峰–喜欢写Blog的人，会经历三个阶段。 第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。 第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。 第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。 对我这种不太喜欢写blog的人，没经历过第一二阶段，直接跳到了第三阶段，哈哈，也希望以后能多多坚持，记录人生（=^_^=）。 正文 注意 本文主要针对Windows平台和Hexo 3.x。Linux和Mac用户可以参考官方文档。 安装GitWindows下请下载并安装 git。 作用：把本地的hexo代码提交到github上去。 安装Node.js点击Node.js下载。 作用：hexo运行环境，用来创建hexo博客框架。 以上两个软件安装很简单，按照步骤来就行了，就不一一赘述了。 安装Hexo运行环境安装玩以后，下面就进入正题了。安装前先介绍几个hexo常用的命令,#后面为注释。 12345hexo g #完整命令为hexo generate,用于生成静态文件hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览hexo d #完整命令为hexo deploy,用于将本地文件发布到github上hexo n #完整命令为hexo new,用于新建一篇文章hexo clean #清除生成的文件 安装很简单，在任意位置右键看到Git Bash Here。打开git命令窗口，输入 1npm install -g hexo 当然国内的网可能反应很慢如果长时间没回应的话，可以换成淘宝npm镜像。 1npm config set registry &quot;https://registry.npm.taobao.org&quot; 可以参考推酷和一介布衣这篇文章。 安装完成后，根据自己喜好建立目录（如F:\\hexo），进入目录右键Git Bash Here，打开命令窗口输入： 1hexo init Hexo 即会自动在目标文件夹建立网站所需要的所有文件。安装依赖包 1npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 下面可以简单的查看一下效果，输入命令： 1hexo s 然后用浏览器访问http://localhost:4000，应该能看到默认的效果了（自带主题landscape）。 部署到Github本地环境搭建好以后，就该发布到互联网，让别人可以访问，我们选择github pages。 创建仓库 注册github账号并登录进入个人中心。 点击Respositories，然后New,新建一个仓库，如下图，注意仓库名必须为 你的用户名.github.io，例如我的用户名imwillxue，仓库名为imwillxue.github.io。 过几分钟就可以访问了。 部署编辑全局配置文件_config.yml(在F:\\hexo下)。部署时，把下面的imwillxue都换成你的账号名。 1234deploy: type: git repository: git@github.com:imwillxue/imwillxue.github.io.git branch: master 注：上面是SSH方式的配置，https方式要把url换成https://github.com/imwillxue/imwillxue.github.io.git。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下,方便以后push代码。 在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。 1ls -al ~/.ssh 如果不存在就没有关系，如果存在的话，可以直接删除.ssh文件夹里面所有文件。输入以下指令（邮箱就是你注册Github时候的邮箱） 1ssh-keygen -t rsa -C &quot;example@126.com&quot; 回车，出现提示让你输入的时候直接回车就行了。 之后找到用户目录下.ssh文件夹，打开id_rsa.pub文件，复制里面的内容。 打开github网页找到右上角setting，进去点SSH keys，新建一个SSH。 回到控制台输入测试命令。 1ssh -T git@github.com 之后会提示连接成功，第一次连可能会警告，输入yes就行了，然后提示连接成功。 配置好以后就可以push到github了，输入命令： 123hexo ghexo d 第一次hexo d可能会报错：ERROR Deployer not found:git，需要安装一下hexo-deployer-git这个插件： 1npm install hexo-deployer-git --save 安装好了继续执行hexo d部署命令，就可以访问了。我的是imwillxue.github.io。注：在hexo d之后会有个这个提示： 需要输入注册邮箱和用户名 12git config --global user.email &quot;example@126.com&quot;git config --global user.name &quot;imwillxue&quot; 打开网站看一看吧。 发表文章 输入命令新建一篇文章： 1hexo n &quot;文章名字&quot; 打开F:\\hexo\\source_posts中新建的文章名字.md文件，我用的Notepad++。 123456title: 文章名字 #标题date: 2016-03-16 23:04:09 #发表日期categories: blog #文章文类tags: [文章,随笔] #文章标签---#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。 参考使用Hexo搭建个人博客(基于hexo3.0)hexo系列教程：（二）搭建hexo博客 最后没了，请看下期。","link":"/blog/Hexo%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80%EF%BC%9Ahexo-github%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2-20160320/"},{"title":"Hexo系列教程之三：next主题的配置和优化","text":"前言 前面介绍了怎么用hexo搭建博客，今天就谢谢主题的配置和优化。因为对hexo默认的主题不是很满意，对于追逐个性的我当然不甘于此，于是开启了折腾之路。对于hexo主题的选择纯凭个人喜好，这一点前面我也有提到，具体可以参考我的博文-Hexo系列教程之零。我现在的主题是yilia，已经配置好了，为了写这篇文章，我准备尝试一下next主题。 正文 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置有主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 安装 NexT具体安装非常简单，你可以直接下载将文件拷贝到hexo下themes目录里，也可以在hexo目录下右键git bash通过命令： 1git clone https://github.com/iissnan/hexo-theme-next themes/next next主题会自动下载到themes目录下。 启用主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next 。 1theme: next 然后可以验证一下，打开本地服务： 1hexo s 浏览器输入 http://localhost:4000 。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse。 配置首先我们看看 站点配置文件 的配置 F:\\hexo\\_config.yml 。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 网站title: 为学 #网站标题subtitle: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。 #网站副标题description: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。 #网站描述author: willxue #您的名字language: zh-CN #网站使用的语言timezone: #网站时区。Hexo 默认使用您电脑的时区# URL 网址## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。url: http://willxue.compermalink: :year/:month/:day/:title/ #生成文件名字的格式我改成blog/:title:year:month:day/permalink_defaults:# Directory 目录配置source_dir: source #源文件夹，这个文件夹用来存放内容。public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #nclude code 文件夹i18n_dir: :lang #国际化（i18n）文件夹skip_render: #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。# Writing 文章new_post_name: :title.md # 新建文章默认文件名default_layout: post # 默认布局titlecase: false # Transform title into titlecaseexternal_link: true # 在新标签中打开一个外部链接，默认为truefilename_case: 0 #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。render_drafts: false #是否渲染_drafts目录下的文章，默认为falsepost_asset_folder: false #启动 Asset 文件夹relative_link: false #把链接改为与根目录的相对位址，默认falsefuture: true #显示未来的文章，默认falsehighlight: #代码块的设置 enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tag 分类和标签的设置default_category: uncategorized #默认分类category_map: #分类别名tag_map: #标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination 分页## Set per_page to 0 to disable paginationper_page: 10 #每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page #分页目录# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: nextfeed: type: atom #feed 类型 (atom/rss2) path: atom.xml #rss 路径 limit: 20 #在 rss 中最多生成的文章数(0显示所有)# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/imwillxue/imwillxue.github.com.git branch: master 上面有注释，看完也基本没什么问题了，这些基本上不用怎么改，个性化主要还是要修改主题的配置文件 F:\\hexo\\themes\\next\\_config.yml。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# Place your favicon.ico to /source directory.favicon: /favicon.ico #站标 可以放在hexo文件夹下的/source里# Set default keywords (Use a comma to separate)keywords: &quot;为学,willxue,willxue.top&quot; #网站关键字# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: #rss这里不设置 引文站点配置文件已经配置了 需要安装插件# Specify the date when the site was setupsince: 1990 #网站时间 从xx开始 类似 1990-2016# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running hexo in a subdirectory (e.g. domain.tld/blog)# Remove leading slashes ( &quot;/archives&quot; -&gt; &quot;archives&quot; )menu: #菜单路径设置 如果hexo在二级目录放置要去掉/ home: / archives: /archives #归档 tags: /tags #标签 categories: /categories #分类 about: /about #关于我 commonweal: /404.html #公益404# Enable/Disable menu icons.# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of menu item and value is the name of FontAwsome icon.# When an question mask icon presenting up means that the item has no mapping icon.menu_icons: #icon图标 enable: true # Icon Mapping. home: home about: user categories: th tags: tags archives: archive commonweal: heartbeat# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes #next的三个scheme#scheme: Muse#scheme: Mistscheme: Pisces# ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# Social links #社交链接social: GitHub: Weibo: Others:# Social Icons #社交的图标social_icons: enable: true # Icon Mappings GitHub: github Twitter: twitter Weibo: weibo# Sidebar Avatar# in theme directory(source/images): /images/avatar.jpg# in site directory(source/uploads): /uploads/avatar.jpg# default : /images/default_avatar.jpgavatar: http://willxue.cn-bj.ufileos.com/logo.png #头像# TOC in the Sidebar #文章自动显示目录toc: enable: true # Automatically add list number to toc. #目录是否自动显示数字序号 number: false# Creative Commons 4.0 International License.# http://creativecommons.org/ #自由协议# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero#creative_commons: by-nc-sa#creative_commons:sidebar: # Sidebar Position, available value: left | right position: left #position: right # Sidebar Display, available value: # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggle icon. display: post #display: always #display: hide #display: remove# ---------------------------------------------------------------# Misc Theme Settings# ---------------------------------------------------------------# Custom Logo.# !!Only available for Default Scheme currently.# Options:# enabled: [true/false] - Replace with specific image# image: url-of-image - Images's urlcustom_logo: enabled: false image:# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: true# Automatically Excerptauto_excerpt: enable: false length: 150# Use Lato fontuse_font_lato: true# ---------------------------------------------------------------# Third Party Services Settings# ---------------------------------------------------------------# MathJax Supportmathjax:# Swiftype Search API Key#swiftype_key:# Baidu Analytics ID#baidu_analytics:# Duoshuo ShortNameduoshuo_shortname: imwillxue# Disqus#disqus_shortname:# Baidu Share# Available value:# button | slide#baidushare:## type: button# Share#jiathis:#add_this_id:# Shareduoshuo_share: true# Google Webmaster tools verification setting# See: https://www.google.com/webmasters/#google_site_verification:# Google Analytics#google_analytics:# CNZZ count#cnzz_siteid:# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: true user_id: 6262178932196377345 admin_nickname: 神# Facebook SDK Support.# https://github.com/iissnan/hexo-theme-next/pull/410facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: true app_id: QImiFijLSOHYufsazlBVlwLg-gsssss app_key: AMcYaNHy9Y5OdH42k0dlll# Tencent analytics ID# tencent_analytics:# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: true## 文章末尾是否显示打赏按钮donate: enable: true text: Enjoy it ? Donate me ! 欣赏此文？求鼓励，求支持！ alipay: wechat: #! ---------------------------------------------------------------#! DO NOT EDIT THE FOLLOWING SETTINGS#! UNLESS YOU KNOW WHAT YOU ARE DOING#! ---------------------------------------------------------------# Motionuse_motion: true# Fancyboxfancybox: true# Static filesvendors: vendorscss: cssjs: jsimages: images# Theme versionversion: 0.5.0 具体的配置可以参考官方文档，写的很详细。 最后懒癌又犯了，本来想写一些详细的配置，以后再说吧。","link":"/blog/Hexo%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89%EF%BC%9Anext%E4%B8%BB%E9%A2%98%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96-20160322/"},{"title":"Hexo系列教程之五：hexo博客同时托管在github和coding","text":"前言 之前查资料发现国内也有个代码托管平台gitcafe，和github很像，打开官网发现gitcafe已经被coding收购了，我们可以把博客托管在coding上，毕竟github服务器在国外可能有所限制（测试时发现访问速度上没什么区别，有时coding还不如github访问快呢）。 正文 一切为了折腾啊！ 注册coding，创建项目注册什么的我就不说了，有点智商的人都会。进入后台，创建新项目。项目名要和用户名一样，这样访问 username.coding.me 就会进入项目了。 配置SSH密钥可以用以前github生成的，参考前面教程。测试： 1ssh -T git@git.coding.net 看到下图所示，表示成功了。 修改配置文件找到hexo目录下站点配置文件 _config.yml 123456deploy: type: git repo: github: git@github.com:imwillxue/imwillxue.github.io.git,master coding: git@git.coding.net:willxue/willxue.git,master 可能要安装插件： 1npm install hexo-deployer-git --save 然后，测试一下吧。 123hexo cleanhexo ghexo d 开启pages服务我开启的master分支的。开启以后访问 http://willxue.coding.me 测试一下看看成功了吗。 绑定域名要实现国内访问跳转到coding，国外访问跳转到github，可以这样设置。注： 我的这种配置要在github根目录新建个CNAME文件，里面填上willxue.top。另外在coding的pages里要绑定域名。 今天又弄了几个免费顶级域名tk ml cf ga 。感觉速度上并没有很慢。 可以用站长之家工具测试一下。 最后参考了一些前辈的文章。还有很多百度google的，链接忘了，同样感谢。http://opiece.me/2016/03/13/push-hexo-to-github-and-coding/","link":"/blog/Hexo%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94%EF%BC%9Ahexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E5%9C%A8github%E5%92%8Ccoding-20160325/"},{"title":"Hexo系列教程之二：购买域名、设置DNS","text":"前言 因为博客托管在github，所以个人博客地址是github的二级域名，不容易让人记住，也很难让百度收录，所以很多人都自己注册域名，和博客地址绑定，这样只要输入自己申请的域名，就能跳转到博客首页，也算是真正拥有了个人网站了。github pages也支持域名绑定。 正文 我是在万网（阿里云）买的域名，top顶级域名第一年只要四元，很便宜，感觉个人用的话就不要买com这种域名了，当然看个人喜好，反正现在域名都很便宜cn这种解析到国内都要备案，还是别麻烦了。。。 前往万网搜索自己想好的域名，没被注册的话，点击购买，可以淘宝账号登陆，之后支付宝付款。 购买玩以后进入工作台，点击域名，然后解析： 第一次可能需要填写个人信息，填完了，点击上面的域名解析-&gt;解析设置-&gt;添加解析，记录类型选A或CNAME，A记录的记录值就是ip地址，github提供了两个IP地址，192.30.252.153和192.30.252.154，随便填一个就行，解析记录设置两个www和不填，线路就默认就行了，CNAME记录值填你的github博客网址imwillxue.github.io 因为我的项目同时托管在github（国外）和coding（国内,后面可能会有教程），国内访问的话就会跳转到willxue.coding.me，国外就会跳转到imwillxue.github.io，如果你选的A记录就要在网站根目录新建CNAME文件，里面填写注册的域名willxue.top 好了现在访问你注册的域名就会跳转到博客首页了。 结尾 明天又周一了，要早起上班了\\(╯-╰)/。本来今天想写个hexo主题配置的，感觉很困，就写了这篇很简短的文章，不说了，睡觉。","link":"/blog/Hexo%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C%EF%BC%9A%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D%E3%80%81%E8%AE%BE%E7%BD%AEDNS-20160320/"},{"title":"Hexo系列教程之四：hexo的配置和优化","text":"前言 前面写了点hexo主题next的一些简单配置，怎奈本人实在太懒，言语表达能力欠缺，写的文章质量太低，态度也有点问题，希望自己能慢慢坚持，努力改正，争取每天都写点。 正文 下面进入正题，现在很多主题已经把很多功能都合并进去，所以操作起来相对简单一些了，以下介绍包含但不限于next主题。 多说评论给站点加入多说评论功能，基本所有主题都集成了，说一下基本操作，以及一些个性化设置。 添加多说评论 打开多说首页,点 我要安装 ，登陆多说（微博或qq快捷登录），创建站点。 按下图进行输入创建评论站点。 创建完以后进入管理后台，在左侧菜单栏里找到工具，右侧代码里看到short_name，也就是刚才输入的多说域名。 打开 主题配置文件，找到 duoshuo_shortname，写到后面。不同主题可能名字不一样，操作都是一样的。 1duoshuo_shortname: imwillxue 修改评论框CSS样式CSS好的可以自己写，详见多说文档。当然google一堆，我的就是google的，前端太烂。下面是我的代码，具体样式评论查看。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173/*Head Start*/#ds-thread #ds-reset ul.ds-comments-tabs li.ds-tab a.ds-current { border: 0px; color: #6D6D6B; text-shadow: none; background: #F3F3F3;}#ds-thread #ds-reset .ds-highlight { font-family: Microsoft YaHei, &quot;Helvetica Neue&quot;, Helvetica, Arial, Sans-serif; ;font-size: 100%; color: #6D6D6B !important;}#ds-thread #ds-reset ul.ds-comments-tabs li.ds-tab a.ds-current:hover { color: #696a52; background: #F2F2F2;}#ds-thread #ds-reset a.ds-highlight:hover { color: #696a52 !important;}#ds-thread { padding-left: 15px;}#ds-thread #ds-reset li.ds-post,#ds-thread #ds-reset #ds-hot-posts { overflow: visible;}#ds-thread #ds-reset .ds-post-self { padding: 10px 0 10px 10px;}#ds-thread #ds-reset li.ds-post,#ds-thread #ds-reset .ds-post-self { border: 0 !important;}#ds-reset .ds-avatar, #ds-thread #ds-reset ul.ds-children .ds-avatar { top: 15px; left: -20px; padding: 5px; width: 36px; height: 36px; box-shadow: -1px 0 1px rgba(0,0,0,.15) inset; border-radius: 46px; background: #FAFAFA;}#ds-thread .ds-avatar a { display: inline-block; padding: 1px; width: 32px; height: 32px; border: 1px solid #b9baa6; border-radius: 50%; background-color: #fff !important;}#ds-thread .ds-avatar a:hover {}#ds-thread .ds-avatar &gt; img { margin: 2px 0 0 2px;}#ds-thread #ds-reset .ds-replybox { box-shadow: none;}#ds-thread #ds-reset ul.ds-children .ds-replybox.ds-inline-replybox a.ds-avatar,#ds-reset .ds-replybox.ds-inline-replybox a.ds-avatar { left: 0; top: 0; padding: 0; width: 32px !important; height: 32px !important; background: none; box-shadow: none;}#ds-reset .ds-replybox.ds-inline-replybox a.ds-avatar img { width: 32px !important; height: 32px !important; border-radius: 50%;}#ds-reset .ds-replybox a.ds-avatar,#ds-reset .ds-replybox .ds-avatar img { padding: 0; width: 32px !important; height: 32px !important; border-radius: 5px;}#ds-reset .ds-avatar img { width: 32px !important; height: 32px !important; border-radius: 32px; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.22); -webkit-transition: .8s all ease-in-out; -moz-transition: .4s all ease-in-out; -o-transition: .4s all ease-in-out; -ms-transition: .4s all ease-in-out; transition: .4s all ease-in-out;}.ds-post-self:hover .ds-avatar img { -webkit-transform: rotateX(360deg); -moz-transform: rotate(360deg); -o-transform: rotate(360deg); -ms-transform: rotate(360deg); transform: rotate(360deg);}#ds-thread #ds-reset .ds-comment-body { -webkit-transition-delay: initial; -webkit-transition-duration: 0.4s; -webkit-transition-property: all; -webkit-transition-timing-function: initial; background: #F7F7F7; padding: 15px 15px 15px 47px; border-radius: 5px; box-shadow: #B8B9B9 0 1px 3px; border: white 1px solid;}#ds-thread #ds-reset ul.ds-children .ds-comment-body { padding-left: 15px;}#ds-thread #ds-reset .ds-comment-body p { color: #787968;}#ds-thread #ds-reset .ds-comments { border-bottom: 0px;}#ds-thread #ds-reset .ds-powered-by { display: none;}#ds-thread #ds-reset .ds-comments a.ds-user-name { font-weight: normal; color: #3D3D3D !important;}#ds-thread #ds-reset .ds-comments a.ds-user-name:hover { color: #D32 !important;}#ds-thread #ds-reset #ds-bubble { display: none !important;}#ds-thread #ds-reset #ds-hot-posts { border: 0;}#ds-reset #ds-hot-posts .ds-gradient-bg { background: none;}#ds-thread #ds-reset .ds-comment-body:hover { background-color: #F1F1F1; -webkit-transition-delay: initial; -webkit-transition-duration: 0.4s; -webkit-transition-property: all; -webkit-transition-timing-function: initial;}/*Head End*/ 打开多说管理后台，把上面的代码复制进去。 显示UA及博主显示ua功能，next主题已经集成了，只需要在配置文件设置一下就行了，效果看下图。 12345duoshuo_info: ua_enable: true #是否显示ua admin_enable: true #是否显示博主 user_id: 6262178932196377345 #多说用户id admin_nickname: 神 #博主昵称自定义 注： 多说id就是打开多说个人中心http://duoshuo.com/settings/，点击你的用户名地址会出现一串数字就是多说id。 其他方法对于很多没有集成这个功能的主题，可以参考一下文章或插件。多说UA插件 - http://gerald.top/code/duoshuo-uaua-parser-js - https://github.com/faisalman/ua-parser-js另外，还有本地化embed.js的，有兴趣的可以google一下。 RSS和sitemap 安装RSS和sitemap插件12npm install hexo-generator-feed --savenpm install hexo-generator-sitemap --save 开启RSS和sitemap功能，编辑站点配置文件 hexo/_config.yml1234feed: type: atom #feed 类型 path: atom.xml #rss 路径 limit: 20 #在 rss 中最多生成的文章数(0显示所有) NexT 中 RSS 有三个设置选项，满足特定的使用场景。 更改 主题配置文件，设定 rss 字段的值： false：禁用 RSS，不在页面上显示 RSS 连接。 留空：使用 Hexo 生成的 Feed 链接。 具体的链接地址：适用于已经烧制过 Feed 的情形。 我们这里留空就行了。 将生成出来的sitemap.xml文件提交给搜索引擎，后面介绍。 腾讯公益404页面在 hexo/source 文件夹下新建404.html，推荐使用腾讯公益404。 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;404&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;http://willxue.top&quot; homePageName=&quot;我的博客&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 常见错误 修改配置文件时注意 YAML 语法，参数冒号: 后一定要留空格 中文乱码请修改文件编码格式为UTF-8 GitHub同步慢或者失败请使用翻墙代理加速 最后 不总结了，且看下回分解。","link":"/blog/Hexo%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B%EF%BC%9Ahexo%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BC%98%E5%8C%96-20160324/"},{"title":"Hexo系列教程之零：知识准备","text":"前言 自从知道hexo+github搭建博客以来，简单搭建了一个，感觉入手很简单，我这种二手程序员也能游刃有余，但是真正要深入学习，懂得一些其中用到的技术，还是得下一番功夫，很惭愧，很懒，没能真正研究，下面列举一些要用到的知识，当然我也是略懂。 正文 HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。引用Hexo作者 @tommy351 的话： 快速、简单且功能强大的 Node.js 博客框架。 A fast, simple &amp; powerful blog framework, powered by Node.js. 特性 风一般的速度Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。 流畅的撰写支持GitHub Flavored Markdown和所有Octopress的插件。 扩展性Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less. 当然上边一堆都是引用的别人的话，说的那些我也不懂，简单地说就是生成静态博客的工具，而且现在有很多主题，我现在用的主题是Yilia by Litten，比较简洁，自己修改一下。主题的话可以参考知乎的这篇 有哪些好看的 Hexo 主题？用的最多有NexT，Jacman 参考zipperary的hexo系列教程http://www.zipperary.com/2013/05/28/hexo-guide-1/hexo官方文档中文版https://hexo.io/zh-cn/docs/index.html Github首先了解下git，摘自百度百科： Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。 Git 是Linux创始人 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 简单说Git是一个版本控制系统，和cvs，svn不同的地方在于git是分布式版本控制系统。具体学习的话，请参考廖雪峰的教程.那么Github呢？维基百科： GitHub是一个利用Git进行版本控制、专门用于存放软件代码与内容的共享虚拟主机服务。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。事实上已经成为了世界上最大的代码存放网站和开源社区。 简单说，它是一个具有版本管理功能的代码仓库，每个项目都有一个主页，列出项目的源文件。但是对于一个新手来说，看到一大堆源码，只会让人头晕脑涨，不知何处入手。他希望看到的是，一个简明易懂的网页，说明每一步应该怎么做。因此，github就设计了Pages功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。 参考搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门 coding.net这个我就不做重点介绍了，就是国内的一个github，因为GFW的你懂得的缘故所以github国内访问可能不稳定，所以我搭建了两个blog，国内托管在coding，国外就是github（这是纯属装逼的行为，因为基本不会有人访问），但是通过这几天的观察证明，coding极不稳定啊，代码推送上去过了半天也不更新，客服说，pages主机在香港，不稳定。。。 Markdown Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 现在写文章，博客基本都用Markdown了，入门也很快。Markdown 语法说明 (简体中文版)还可以参考这个认识与入门 Markdown 最后 其他一些比较杂的知识，后面再说。","link":"/blog/Hexo%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E9%9B%B6%EF%BC%9A%E7%9F%A5%E8%AF%86%E5%87%86%E5%A4%87-20160319/"},{"title":"在VPS上部署Java项目，绑定多个域名","text":"工作不到一年，以前又异常懒惰，对服务器方面一向没有什么认知，听名字以为很高级，刚开始有些不知所措，从网上搜索了一些知识，总算有了一定的了解，但也只能算刚刚入门，记录一下。 VPS VPS（Virtual Private Server 虚拟专用服务器）技术，将一部服务器分割成多个虚拟专享服务器的优质服务。每个VPS都可分配独立公网IP地址、独立操作系统、实现不同VPS间磁盘空间、内存、CPU资源、进程和系统配置的隔离，为用户和应用程序模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。 简单来说就是出于成本考虑，租用服务器花费太高，服务商将服务器分割成若干个“服务器”，这些个“服务器”有可以享有独立的ip，os等资源，比较适合中小企业建站需求。 VPS上部署Java项目以前认知上一直有个误区，以为服务器都很复杂，而现在大多数服务器的环境全是php的，我要部署Java应用，感觉无从下手，其实服务器和我们平常用的计算机没有什么区别，只是要24小时运行，联网，为外界提供访问。所以下面就好理解了。我用的vps装的是Windows server 2008 R2，以前运行过asp项目，所以安装有IIS，因为IIS已经占用了80端口，所以再要tomcat运行javaweb程序的话，搜到了以下几种解决方法： 我的情况，不需要asp程序了，将IIS卸载释放80端口。 同时运行asp和jsp程序，需要将IIS和tomcat进行整合，网上有很多教程，我很懒，没弄！ 好像也可以用nginx反向代理，没深入研究，这几天打算学一下nginx呢。 我就介绍下第一种情况把（懒癌患者）！安装 jdk1.7 ， tomcat7 配置好环境变量，这些基础的就不说了，就和在自己电脑上一样安装。 将要运行的项目用eclipse打成war包，上传到vps上，放到 tomcat\\webapps下或者其他目录也行，为了方便我就放到webapps下了。 修改 tomcat\\conf 下的 server.xml 文件修改端口为80，这样输入网址的时候就不用加上端口了。 12#将端口修改成80 URIEncoding=&quot;UTF-8&quot;是防止乱码的&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; /&gt; 绑定域名，还是修改 tomcat\\conf 下的 server.xml 文件。 12345678910111213&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;www.abc.com&quot;&gt; &lt;Realm className=&quot;org.apache.catalina.realm.LockOutRealm&quot;&gt; &lt;/Realm&gt; &lt;Host name=&quot;www.abc.com&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt; &lt;Context path=&quot;&quot; docBase=&quot;abc&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt; &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt; &lt;/Host&gt; &lt;Host name=&quot;www.bcd.com&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt; &lt;Context path=&quot;&quot; docBase=&quot;bcd&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt; &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt; &lt;Alias&gt;bcd.com&lt;/Alias&gt; &lt;/Host&gt;&lt;/Engine&gt; 配置说明： defaultHost=&quot;www.abc.com&quot; 表示访问该tomcat默认进入的主机。也可以是localhost 不改，这样别人访问你的ip的话会进入tomcat设置界面。 Host 的 name:表示该主机绑定的域名,也可以是公网ip,如果绑定localhost则可以通过在浏览器中输入localhost访问该Host。Host的 appBase:表示该主机绑定的文件存放路径,可以使用相对路径或绝对路径如：d:/abc，tomcat会默认部署该目录里的应用。 &lt;Context path=&quot;&quot; docBase=&quot;abc&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt; 如果不加这句，就会默认访问appBase下的ROOT文件夹下的项目。path是说明虚拟目录的名字，如果你要只输入ip地址就显示主页，则该键值留为空；docBase是虚拟目录的路径，它默认的是$tomcat/webapps/ROOT目录，我的项目在webapps\\abc目录，让该目录作为我的默认目录。debug和reloadable一般都分别设置成0和true。 绑定多个域名的话就在加一个host标签。 多个域名同时访问一个项目，比如www.bcd.com和bcd.com都访问到bcd项目，host里加入标签，A大写。 现在重启tomcat浏览器输入地址就可以访问到要部署的项目了。为了方便可以把tomcat加入windows服务，直接打开 tomcat\\bin\\service.bat 就会自动加入服务了。 问题 域名解析到服务器的ip了，tomcat也配置好了，还是访问不了。首先，域名解析到国内的vps都得备案，还有可能vps提供商的后台需要把域名加入白名单才能访问。 我还没发现其他的问题。","link":"/blog/deploy-javaweb-to-vps-20160331/"},{"title":"Git Cheat Sheet","text":"Git 创建复制一个已创建的仓库: 1$ git clone ssh://user@domain.com/repo.git 创建一个新的本地仓库: 1$ git init 本地修改显示工作路径下已修改的文件： 1$ git status 显示与上次提交版本文件的不同： 1$ git diff 把当前所有修改添加到下次提交中： 1$ git add 把对某个文件的修改添加到下次提交中： 1$ git add -p &lt;file&gt; 提交本地的所有修改： 1$ git commit -a 提交之前已标记的变化： 1$ git commit 附加消息提交： 1$ git commit -m 'message here' 提交，并将提交时间设置为之前的某个日期: 1git commit --date=&quot;`date --date='n day ago'`&quot; -am &quot;Commit Message&quot; 修改上次提交请勿修改已发布的提交记录! 1$ git commit --amend 把当前分支中未提交的修改移动到其他分支 123git stashgit checkout branch2git stash pop 搜索从当前目录的所有文件中查找文本内容： 1$ git grep &quot;Hello&quot; 在某一版本中搜索文本： 1$ git grep &quot;Hello&quot; v2.5 提交历史从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）： 1$ git log 显示所有提交（仅显示提交的hash和message）： 1$ git log --oneline 显示某个用户的所有提交： 1$ git log --author=&quot;username&quot; 显示某个文件的所有修改： 1$ git log -p &lt;file&gt; 谁，在什么时间，修改了文件的什么内容： 1$ git blame &lt;file&gt; 分支与标签列出所有的分支： 1$ git branch 切换分支： 1$ git checkout &lt;branch&gt; 创建并切换到新分支: 1$ git checkout -b &lt;branch&gt; 基于当前分支创建新分支： 1$ git branch &lt;new-branch&gt; 基于远程分支创建新的可追溯的分支： 1$ git branch --track &lt;new-branch&gt; &lt;remote-branch&gt; 删除本地分支: 1$ git branch -d &lt;branch&gt; 强制删除一个本地分支：将会丢失未合并的修改！ 1$ git branch -D &lt;branch&gt; 给当前版本打标签： 1$ git tag &lt;tag-name&gt; 更新与发布列出当前配置的远程端： 1$ git remote -v 显示远程端的信息： 1$ git remote show &lt;remote&gt; 添加新的远程端： 1$ git remote add &lt;remote&gt; &lt;url&gt; 下载远程端版本，但不合并到HEAD中： 1$ git fetch &lt;remote&gt; 下载远程端版本，并自动与HEAD版本合并： 1$ git remote pull &lt;remote&gt; &lt;url&gt; 将远程端版本合并到本地版本中： 1$ git pull origin master 将本地版本发布到远程端： 1$ git push remote &lt;remote&gt; &lt;branch&gt; 删除远程端分支： 123$ git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)orgit push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0) 发布标签: 1$ git push --tags 合并与重置将分支合并到当前HEAD中： 1$ git merge &lt;branch&gt; 将当前HEAD版本重置到分支中:请勿重置已发布的提交! 1$ git rebase &lt;branch&gt; 退出重置: 1$ git rebase --abort 解决冲突后继续重置： 1$ git rebase --continue 使用配置好的merge tool 解决冲突： 1$ git mergetool 在编辑器中手动解决冲突后，标记文件为已解决冲突 1$ git add &lt;resolved-file&gt; 1$ git rm &lt;resolved-file&gt; 撤销放弃工作目录下的所有修改： 1$ git reset --hard HEAD 移除缓存区的所有文件（i.e. 撤销上次git add）: 1$ git reset HEAD 放弃某个文件的所有本地修改： 1$ git checkout HEAD &lt;file&gt; 重置一个提交（通过创建一个截然不同的新提交） 1$ git revert &lt;commit&gt; 将HEAD重置到指定的版本，并抛弃该版本之后的所有修改： 1$ git reset --hard &lt;commit&gt; 将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改： 1$ git reset &lt;commit&gt; 将HEAD重置到上一次提交的版本，并保留未提交的本地修改： 1$ git reset --keep &lt;commit&gt; Git-Flow 安装 你需要有一个可以工作的 git 作为前提。 Git flow 可以工作在 OSX, Linux 和 Windows之下 OSX Homebrew:1$ brew install git-flow OSX Macports:1$ port install git-flow Linux:1$ apt-get install git-flow Windows (Cygwin):安装 git-flow, 你需要 wget 和 util-linux。 1$ wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash 开始 为了自定义你的项目，Git flow 需要初始化过程。 使用 git-flow，从初始化一个现有的 git 库内开始。 初始化，你必须回答几个关于分支的命名约定的问题。建议使用默认值。 1git flow init 特性 为即将发布的版本开发新功能特性。 这通常只存在开发者的库中。 创建一个新特性:下面操作创建了一个新的feature分支，并切换到该分支 1git flow feature start MYFEATURE 完成新特性的开发:完成开发新特性。这个动作执行下面的操作： 合并 MYFEATURE 分支到 ‘develop’ 删除这个新特性分支 切换回 ‘develop’ 分支 1git flow feature finish MYFEATURE 发布新特性:你是否合作开发一项新特性？发布新特性分支到远程服务器，所以，其它用户也可以使用这分支。 1git flow feature publish MYFEATURE 取得一个发布的新特性分支:取得其它用户发布的新特性分支。 1git flow feature pull origin MYFEATURE 追溯远端上的特性:通过下面命令追溯远端上的特性 1git flow feature track MYFEATURE 做一个release版本 支持一个新的用于生产环境的发布版本。 允许修正小问题，并为发布版本准备元数据。 开始创建release版本: 开始创建release版本，使用 git flow release 命令。 ‘release’ 分支的创建基于 ‘develop’ 分支。 你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支。 这个提交记录的 sha-1 hash 值必须是’develop’ 分支下的。 1git flow release start RELEASE [BASE] 创建 release 分支之后立即发布允许其它用户向这个 release 分支提交内容是个明智的做法。命令十分类似发布新特性： 1git flow release publish RELEASE (你可以通过git flow release track RELEASE 命令追溯远端的 release 版本) 完成 release 版本:完成 release 版本是一个大 git 分支操作。它执行下面几个动作： 归并 release 分支到 ‘master’ 分支。 用 release 分支名打 Tag 归并 release 分支到 ‘develop’ 移除 release 分支。 1git flow release finish RELEASE 不要忘记使用git push --tags将tags推送到远端 紧急修复紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。有可能是需要修正 master 分支上某个 TAG 标记的生产版本。 开始 git flow 紧急修复:像其它 git flow 命令一样, 紧急修复分支开始自： 1$ git flow hotfix start VERSION [BASENAME] VERSION 参数标记着修正版本。你可以从 [BASENAME]开始，[BASENAME]`为finish release时填写的版本号 完成紧急修复:当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。 1git flow hotfix finish VERSION Commands 来源ArslanBilal","link":"/blog/git-cheat-sheet-20160412/"},{"title":"go语言学习（一）net&#x2F;http包客户端实例练习","text":"因为我是学Java的，主要做web开发，所以看了点go的基础知识后，就试着把以前的demo用go实现以下，而且go web开发非常简便只要几行代码，就能实现简单http服务器，今天主要写一下用net/http包模拟客户端发送请求实现百度推送（实时）。 开始项目结构1234567.├── static| ├── css| └── layer├── views| └── index.html└── main.go main.go123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596package mainimport ( &quot;fmt&quot; &quot;html/template&quot; &quot;io/ioutil&quot; &quot;log&quot; &quot;net/http&quot; &quot;net/url&quot; &quot;strings&quot;)func main() { http.HandleFunc(&quot;/&quot;, index) http.HandleFunc(&quot;/send&quot;, bdSend) //处理静态文件 http.Handle(&quot;/static/&quot;, http.StripPrefix(&quot;/static/&quot;, http.FileServer(http.Dir(&quot;static&quot;)))) err := http.ListenAndServe(&quot;:80&quot;, nil) if err != nil { log.Fatal(err) }}//首页func index(w http.ResponseWriter, r *http.Request) { if r.Method == &quot;GET&quot; { t, err := template.ParseFiles(&quot;views/index.html&quot;) if err != nil { log.Fatal(err) } t.Execute(w, nil) }}//推送func bdSend(w http.ResponseWriter, r *http.Request) { if r.Method == &quot;POST&quot; { request(w, r) }}//模拟http客户端post发送请求func request(w http.ResponseWriter, r *http.Request) { //先解析form err := r.ParseForm() if err != nil { log.Fatal(err) } //请求地址 var apiURL string switch r.Form[&quot;oper&quot;][0] { case &quot;post&quot;: apiURL = &quot;http://data.zz.baidu.com/urls&quot; case &quot;update&quot;: apiURL = &quot;http://data.zz.baidu.com/update&quot; case &quot;del&quot;: apiURL = &quot;http://data.zz.baidu.com/del&quot; } //初始化参数 param := url.Values{} //配置请求参数,方法内部已处理urlencode问题,中文参数可以直接传参 param.Set(&quot;site&quot;, r.Form[&quot;site&quot;][0]) param.Set(&quot;token&quot;, r.Form[&quot;token&quot;][0]) var URL *url.URL URL, err = url.Parse(apiURL) if err != nil { fmt.Printf(&quot;解析url错误:\\r\\n%v&quot;, err) } //如果参数中有中文参数,这个方法会进行URLEncode URL.RawQuery = param.Encode() client := &amp;http.Client{} req, _ := http.NewRequest(&quot;POST&quot;, URL.String(), strings.NewReader(r.Form[&quot;sendURL&quot;][0])) req.Header.Set(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;) //req.Header.Set(&quot;User-Agent&quot;, &quot;curl/7.12.1&quot;) //req.Header.Set(&quot;Host&quot;, &quot;data.zz.baidu.com&quot;) //发送请求 resp, err := client.Do(req) //注意关闭resp.Body defer resp.Body.Close() data, err := ioutil.ReadAll(resp.Body) if err != nil { fmt.Printf(&quot;请求失败,错误信息:\\r\\n%v&quot;, err) } else { //var returns map[string]interface{} //json.Unmarshal(data, &amp;returns) //data, err = json.Marshal(returns) //将返回的json数据返给客户端浏览器 fmt.Fprintln(w, string(data)) }} index.html12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt; &lt;title&gt;百度主动推送(实时)&lt;/title&gt; &lt;LINK rel=&quot;Bookmark&quot; href=&quot;/static/favicon.ico&quot;&gt; &lt;LINK rel=&quot;Shortcut Icon&quot; href=&quot;/static/favicon.ico&quot; /&gt; &lt;!-- Bootstrap --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/style.css&quot;&gt; &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt; &lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=&quot;//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;//cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/head&gt; &lt;body class=&quot;bg-body&quot;&gt; &lt;div class=&quot;container text-center bg&quot;&gt; &lt;h1&gt;百度主动推送（实时）&lt;/h1&gt; &lt;form class=&quot;form-horizontal&quot; id=&quot;form&quot; &gt; &lt;div class=&quot;form-group form-group-lg&quot;&gt; &lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt; &lt;select class=&quot;form-control&quot; id=&quot;oper&quot; name=&quot;oper&quot;&gt; &lt;option value=&quot;post&quot;&gt;推送数据&lt;/option&gt; &lt;option value=&quot;update&quot;&gt;更新数据&lt;/option&gt; &lt;option value=&quot;del&quot;&gt;删除数据&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group form-group-lg&quot;&gt; &lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt; &lt;input type=&quot;tel&quot; class=&quot;form-control&quot; id=&quot;site&quot; name=&quot;site&quot; placeholder=&quot;要推送内容的网站，例如：www.example.com&quot; required &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group form-group-lg&quot;&gt; &lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt; &lt;input type=&quot;tel&quot; class=&quot;form-control&quot; id=&quot;token&quot; name=&quot;token&quot; placeholder=&quot;百度站长平台秘钥，例如：ZD4V6EK2QNpzwill&quot; required &gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group form-group-lg&quot;&gt; &lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt; &lt;textarea class=&quot;form-control&quot; name=&quot;sendURL&quot; rows=&quot;8&quot; placeholder=&quot;网址之间要换行，例如：http://www.example/abc.hmlhttp://www.example/bcd.html&quot; &gt;&lt;/textarea&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group form-group-lg&quot;&gt; &lt;div class=&quot;col-sm-8 col-sm-offset-2&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-success btn-lg btn-block&quot; onclick=&quot;ajaxSub()&quot;&gt;推送&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;h3&gt;&amp;copy; 2016 powered by &lt;a href=&quot;http://willxue.top&quot; target=&quot;_blank&quot;&gt;willxue&lt;/a&gt;&lt;/h3&gt; &lt;/form&gt; &lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt; &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt; &lt;script src=&quot;//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;/static/layer/layer.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; function ajaxSub(){ $.post(&quot;/send&quot;, $(&quot;#form&quot;).serialize(), function(result){ if (result.indexOf(&quot;Exception&quot;)&gt;0) { layer.alert(&quot;请确认站点和token是否匹配&quot;,{title: &quot;错误&quot;,icon:2}); } else { var data = JSON.parse(result); if (result.indexOf(&quot;success&quot;)&gt;0) { layer.alert(&quot;成功推送了：&quot;+data.success+&quot; 个&lt;br/&gt;今天还能推送：&quot;+data.remain+&quot; 个&lt;br/&gt;不是本站而未处理的url列表： &quot;+data.not_same_site+&quot;&lt;br/&gt;不合法的url：&quot;+data.not_valid,{icon:1}); } else{ layer.alert(&quot;推送失败了，错误码：&quot;+data.error+&quot;&lt;br/&gt;错误描述：&quot;+data.message,{title: &quot;错误&quot;,icon:2}); } } }); } &lt;/script&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; Demo在线demo部署在daocloud http://gobaidu.daoapp.io/","link":"/blog/golang-learn-01-20161130/"},{"title":"go语言学习之零","text":"很早就听说过google的go语言了，一直没心思去学习新东西，最近不知道抽什么风，突然看到有关go的话题，决定简单入门一下，做不了大神，随便玩玩，以下几篇博客应该都会根据《go语言圣经》一书所写。 学习准备 这篇博文不打算讲什么干活，以为我还没学呢(^__^)，go语言历史什么的也没什么意思，主要放一些最近搜到的资料。 视频无闻的三套视频教程 Go编程基础 Go web基础 Go名库讲解 书 Go web编程 By asta谢 Go入门指南 Golang标准库 github 真是好东西！还想要什么就去 github 搜。 ps: 这点书够啃几天了。。。","link":"/blog/golang-learn-0-20161122/"},{"title":"java.lang.OutOfMemoryError: PermGen space","text":"在vps上部署多个应用时，报了 java.lang.OutOfMemoryError: PermGen space 错误，由于没有深入了解过jvm，只能在网上搜到了一些解决办法。 简述 java.lang.OutOfMemoryError: PermGen spacePermGen space的全称是Permanent Generation space,是指内存的永久保存区域, 这块内存主要是被JVM存放Class和Meta信息的,Class在被Loader时就会被放到PermGen space中, 它和存放类实例(Instance)的Heap区域不同,GC(Garbage Collection)不会在主程序运行期对 PermGen space进行清理，所以如果你的应用中有很多CLASS的话,就很可能出现PermGen space错误, 这种错误常见在web服务器对JSP进行pre compile的时候。如果你的WEB APP下都用了大量的第三方jar, 其大小超过了jvm默认的大小(4M)那么就会产生此错误信息了。 解决办法 这里以windows下tomcat环境为例，其它WEB服务器如jboss,weblogic等是同一个道理。 MyEclipse/eclipse 中报 PermGen space。window–&gt;preferences–&gt;Myclipse–&gt;Servers–&gt;Tomcat–&gt;JDK,设置jdk参数。1-Xms512m -Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=256m 参数介绍：1234-Xms512m #JVM初始分配的堆内存-Xmx1024m #JVM最大允许分配的堆内存，按需分配-XX:PermSize=128M #JVM初始分配的非堆内存-XX:MaxPermSize=256M #JVM最大允许分配的非堆内存，按需分配 手动设置MaxPermSize大小，如果是linux系统，修改TOMCAT_HOME/bin/catalina.sh，如果是windows系统，修改TOMCAT_HOME/bin/catalina.bat，在 1echo &quot;Using CATALINA_BASE: $CATALINA_BASE&quot; 上面加入以下行：1JAVA_OPTS=&quot;-Xms512m -Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=256m&quot; 建议：将相同的第三方jar文件移置到tomcat/lib目录下，这样可以达到减少jar 文档重复占用内存的目的。 在windows中，如果以服务方式启动，这个一般在服务器上用的比较多，修改注册表的数据。找到 HKEY_LOCAL_MACHINE/SOFTWARE/Apache Software Foundation/Procrun 2.0/Tomcat7/Parameters/Java 或HKEY_LOCAL_MACHINE/SOFTWARE/Wow6432Node/Apache Software Foundation/Procrun 2.0/Tomcat7/Parameters/Java，修改JvmMs和JvmMx的值。或者直接修改Options的参数，加入 -Xms512m -Xmx1024m -XX:PermSize=128M -XX:MaxPermSize=256m之前还真不知道windows服务启动和startup.bat启动的区别。 windows服务器启动是在注册表中加载参数，startup.bat启动是在catalina.bat加载参数。 参考 http://www.cnblogs.com/mingforyou/archive/2012/03/03/2378143.htmlhttp://www.cnblogs.com/xwdreamer/archive/2011/11/21/2296930.html","link":"/blog/java-lang-OutOfMemoryError-PermGen-space-20160406/"},{"title":"（转）假如时光能够倒流，我会这么学习Java","text":"最近有点迷茫，工作不是很喜欢，感觉自己原来什么都不会，看到了这篇文章，感觉要从新学习一下Java，充实自己。","link":"/blog/how-to-learn-java-20160329/"},{"title":"我也能静下心来写东西吗？","text":"是的，我也能静下心来写东西吗？ 多久了，有多久没写过东西了？从小到大作文一直像恶梦一样困扰着我，表达能力从来都很烂… 突然要写东西，憋了几天，先来一篇helloworld吧！ 还好，只打算写些技术性和工作相关的东西，不需要怎么组织语言… 我是一个特别懒散的人，特别懒的人，基本上周六日不出屋，吃饭叫外卖，床上躺一天… 最近突然接触了Hexo静态博客，也试着搭建了一个，折腾了两天，觉得不能白忙乎，这项没有尽头的道路，还是应该摸黑走下去。 作为一个程序员，知识颇杂，几日不敲代码，好不容易百度google到的知识就又飘散了，so不能每天都把时间浪费在这种死循环中，决意要break出来。 最后心里还是有点虚啊，坚持吧！！！","link":"/blog/%E6%88%91%E4%B9%9F%E8%83%BD%E9%9D%99%E4%B8%8B%E5%BF%83%E6%9D%A5%E5%86%99%E4%B8%9C%E8%A5%BF%E5%90%97%EF%BC%9F-20160319/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"教程","slug":"教程","link":"/tags/%E6%95%99%E7%A8%8B/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"tomcat","slug":"tomcat","link":"/tags/tomcat/"},{"name":"域名","slug":"域名","link":"/tags/%E5%9F%9F%E5%90%8D/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"go","slug":"go","link":"/tags/go/"},{"name":"随笔","slug":"随笔","link":"/tags/%E9%9A%8F%E7%AC%94/"},{"name":"hello world","slug":"hello-world","link":"/tags/hello-world/"}],"categories":[{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"java","slug":"java","link":"/categories/java/"},{"name":"git","slug":"git","link":"/categories/git/"},{"name":"go","slug":"go","link":"/categories/go/"},{"name":"随笔","slug":"随笔","link":"/categories/%E9%9A%8F%E7%AC%94/"}]}